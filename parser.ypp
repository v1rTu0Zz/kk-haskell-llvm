%{

#include <iostream>
#include <string>
#include <cstdlib>
#include <vector>
#include "ast.hpp"
  using namespace std;

  void yyerror(string s) {
    cerr << s << endl;
    exit(EXIT_FAILURE);
  }

  extern int yylex();

  int br_fje = 0;
%}

%union {
  double d;
  string *s;
  ExprAST *e;
  vector<ExprAST*> *v;
  vector<string> *v1;
  PrototypeAST *p;
  FunctionAST *f;
  vector< FunctionAST*> *vf;
}

%type <e> E NizUslova
%type <v1> Args Args1
%type <v> NizArg NizArg1
%type <f> Funkcija Dodela
%type <vf> NizFjaDodela

%token if_token then_token else_token eq_token ow_token 
		let_token in_token where_token case_token of_token
%token <s> id_token
%token <s> string_token
%token <d> num_token

%nonassoc else_token
%right '='
%left '<' '>' eq_token
%left '+' '-'
%left '*' '/'

%%

Naredba: let_token NizFjaDodela in_token E {

  for(auto var:*$2) {
	var->codegen();
  }

  FunctionAST *fa = new FunctionAST(
						new PrototypeAST("anonimna_fja_"+to_string(br_fje++),
							vector<string>()), $4);
  fa->codegen();

  delete $2;
  delete fa;
}
/*| NizFja E {
//TODO: fix conflicts if possible
  for(auto fja:*$1) {
  	fja->codegen();
  }


  FunctionAST *fa = new FunctionAST(
						new PrototypeAST("anonimna_fja_"+to_string(br_fje++),
							vector<string>()), $2);
  fa->codegen();

  delete $1;
  delete fa;
}
*/

| E where_token NizFjaDodela {

  for(auto var:*$3) {
	var->codegen();
  }

  FunctionAST *fa = new FunctionAST(
						new PrototypeAST("anonimna_fja_"+to_string(br_fje++),
							vector<string>()), $1);
  fa->codegen();

  delete $3;
  delete fa;
}
| E {
  FunctionAST *f = new FunctionAST(
						new PrototypeAST("anonimna_fja_"+to_string(br_fje++),
							vector<string>()), $1
					);
  f->codegen();
  delete f;
}
| {

}
;

E: E '+' E {
  $$ = new AddExprAST($1, $3);
 }
| E '-' E {
  $$ = new SubExprAST($1, $3);
 }
| E '*' E {
  $$ = new MulExprAST($1, $3);
 }
| E '/' E {
  $$ = new DivExprAST($1, $3);
 }
| E '<' E {
  $$ = new LtExprAST($1, $3);
 }
| E '>' E {
  $$ = new GtExprAST($1, $3);
 }
| E eq_token E {
  $$ = new EqExprAST($1, $3);
 }
| '(' E ')' {
  $$ = $2;
 }
| num_token {
  $$ = new NumberExprAST($1);
 }
| if_token E then_token E else_token E {
  $$ = new IfExprAST($2, $4, $6);
 }
| id_token {
  $$ = new VariableExprAST(*$1);
  delete $1;
}
/*| case_token E of_token NizMogucnosti { 
	// TODO: create nested if that check equality
 }
*/
| id_token '(' NizArg ')' {
  $$ = new CallExprAST(*$1,*$3);
  delete $1;
}
;

/* NizMogucnosti: E '-''>' E NizMogucnosti {
// TODO: solve conflicts if possible
			 
}
| E '-''>' E {

}
;
*/

NizFjaDodela: NizFjaDodela Funkcija {
  $$ = $1;
  $$->push_back($2);
}
| NizFjaDodela Dodela {
  $$ = $1;
  $$->push_back($2);
}
| Funkcija {
  $$ = new vector<FunctionAST*>();
  $$->push_back($1);
}
| Dodela {
  $$ = new vector<FunctionAST*>();
  $$->push_back($1);
}
;

Funkcija: id_token '(' Args ')' '=' E {
  $$ = new FunctionAST(new PrototypeAST(*$1, *$3), $6);
  delete $1;
  delete $3;
}
| id_token '=' '\\' '(' Args ')' '-' '>' E {
  $$ = new FunctionAST(new PrototypeAST(*$1, *$5), $9);
  delete $1;
  delete $5;
}
| id_token '(' Args ')' NizUslova {
  $$ = new FunctionAST(new PrototypeAST(*$1, *$3), $5);
  delete $1;
  delete $3;
}
;

Dodela: id_token '=' E {
    $$ = new FunctionAST(new PrototypeAST(*$1, vector<string>()), $3);
	delete $1;
}
;

NizUslova: '|' E '=' E NizUslova {
  $$ = new IfExprAST($2, $4, $5);
}
| '|' E '=' E '|' ow_token '=' E {
  $$ = new IfExprAST($2, $4, $8);
}
; 

NizArg: NizArg1 {
  $$ = $1;
}
| {
  $$ = new vector<ExprAST*>();
}
;

NizArg1: E ',' NizArg1 {
  $$ = $3;
  $$->push_back($1);
 }
| E {
  $$ = new vector<ExprAST*>();
  $$->push_back($1);
 }
;

Args: Args1 {
  $$ = $1;	
}
| {
  $$ = new vector<string>();
}
;

Args1: id_token ',' Args1 {
	$$ = $3;
	$$->push_back(*$1);
	delete $1;
} | id_token {
	$$ = new vector<string>();
	$$->push_back(*$1);
	delete $1;
}
;
%%

extern Module* TheModule;
extern LLVMContext TheContext;
extern legacy::FunctionPassManager* TheFPM;

int main() {
  TheModule = new Module("My module", TheContext);
  TheFPM = new legacy::FunctionPassManager(TheModule);

  TheFPM->add(createInstructionCombiningPass());
  TheFPM->add(createReassociatePass());
  TheFPM->add(createNewGVNPass());
  TheFPM->add(createCFGSimplificationPass());

  TheFPM->doInitialization();
  
  yyparse();
  TheModule->print(outs(), nullptr);
  delete TheModule;
  delete TheFPM;
  
  return 0;
}

